# 1. Создание множеств Python
# Создать объект set в Python можно двумя путями:
#
# Использовать фигурные скобки {}
# Использовать встроенную функцию set()

s1 = {}  # Это создаст пустое множество
s2 = {1, 'pythonru', 20.67}

s3 = set()  # Это создаст пустое множество

# 2. Добавление элементов в множества Python

set1 = {1, 3, 4}
set1.add(2)
print(set1)

# 3. Добавление нескольких элементов в множество Python

set2 = {1, 2, 3}
set2.update([4, 5, 6])
print(set2)

# 4. Удаление элементов из множеств Python

# remove()
# discard()
# pop()

# Метод remove() полезен в тех случаях, когда нужно удалить из множества
# конкретный элемент и вернуть ошибку в том случае, если его нет в объекте.
set1 = {1, 2, 3, 4, 'a', 'p'}
set1.remove(2)
# print(set1)
# set1.remove(5)


# Метод discard() полезен, потому что он удаляет конкретный элемент
# и не возвращает ошибку, если тот не был найден во множестве.
set1 = {1, 3, 4, 'a', 'p'}
set1.discard('a')
print(set1)
# {1, 3, 4 'p'}

set1.discard(6)
print(set1)
# {1, 3, 4, 'p'}

# Метод pop() удаляет по одному элементу за раз в случайном порядке.
# Set — это неупорядоченная коллекция, поэтому pop() не требует аргументов
# (индексов в этом случае). Метод pop() можно воспринимать как неконтролируемый
# способ удаления элементов по одному из множеств в Python.

set1 = {1, 3, 4, 'p'}
set1.pop()
print(set1)

# len(num_set) — вернет количество элементов в объекте set.

# copy() — создает копию существующего множества и сохраняет ее в новом объекте.
# new_set = num_set.copy()

# clear() —очищает множество (удаляет все элементы за раз)
# num_set.clear()

# del — удаляет множество целиком
# del num_set


# Объединение множеств
A = {1, 2, 3}
B = {2, 3, 4, 5}
C = A | B  # используя символьный метод
C1 = A.union(B)  # используя метод union
print(C, C1)

# Пересечение множеств
# При использовании на двух множествах вы получаете новый объект,
# содержащий общие элементы обоих (без повторов). Операция
# пересечения выполняется двумя способами: с помощью символа & или метода intersection().

A = {1, 2, 3, 4}
B = {3, 4, 5, 6}
C = A & B  # используя символьный метод
C1 = A.intersection(B)  # используя метод intersection
print(C, C1)

# Разность множеств
# При использовании на двух множествах вы получаете новый объект, содержащий элементы,
# которые есть в первом, но не втором (в данном случае — в множестве “A”).
# Операция разности выполняется двумя способами: с помощью символа - или метода difference().

A = {1, 2, 3, 4}
B = {3, 4, 5, 6}
C = A - B  # используя символьный метод
C1 = A.difference(B)  # используя метод difference
print(C, C1)

# Симметричная разность множеств
# При использовании на двух множествах вы получаете новый объект, содержащий все элементы,
# кроме тех, что есть в обоих. Симметрическая разность выполняется двумя способами:
# с помощью символа ^ или метода symmetric_difference()

C = A ^ B  # используя символьный метод
C1 = A.symmetric_difference(B)  # используя метод symmetric_difference
print(C, C1)


