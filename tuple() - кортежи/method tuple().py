# Эта структура данных используется для
# хранения последовательности упорядоченных и неизменяемых элементов.

cake = ('c', 'a', 'k', 'e')
print(type(cake))

# Кортежи могут включать однородные иразнородные значения.
# Но после объявления их уже нельзя будет поменять:

mixed_type = ('C', 0, 0, 'K', 'I', 'E')

for i in mixed_type:
    print(i, ":", type(i))

# mixed_type[1] = "O" - нельзя

# Создать кортеж
numbers_tuple = 1, 2, 3, 4, 5
print(type(numbers_tuple))
a_tup = tuple([1, 2, 1, 55, 12])

# Некоторые кортежи (которые содержат только неизменяемые объекты: строки и так далее)
# — неизменяемые, а другие (содержащие изменяемые типы, например, списки)
# изменяемые. Но это очень обсуждаемая тема среди программистов на Python
# и необходимы кое-какие познания, чтобы полностью понять ее.
# В целом же кортежи неизменяемые.
#
# Вы не можете добавлять в них новые элементы. У этого типа нет методов append() или extend()
# Удалять элементы тоже нельзя, также из-за неизменяемости. Методов remove() и pop() здесь нет
# Искать элементы в кортеже можно, потому что этот процесс его не меняет
# Разрешено использовать оператор in для проверки наличия элемента в кортеже

# Срезы
numbers = (0, 1, 2, 3, 4, 5)
print(numbers[2])
print(numbers[-1])
print(numbers[:2])

# Объединение кортежей
x = (1, 2, 3, 4)
y = (5, 6, 7, 8)

# Объединение двух кортежей для формирования нового кортежа
z = x + y
print(z)

# count() возвращает количество повторений элемента в кортеже.
a = [1, 2, 3, 4, 5, 5]
a.count(5)

# len() — длина кортежа:
a = (1, 2, 3, 4, 5)
print(len(a))

# any()
# Функцию any() можно использовать, чтобы
# определить являются ли элементы кортежа итерируемыми. Если да, то она вернет True.
a = (1,)
print(any(a))

tuple()
# Функция tuple() используется для конвертации данных в кортеж.
# Например, так можно превратить список в кортеж.

a_list = [1, 2, 3, 4, 5]
b_tuple = tuple(a_list)
print(type(b_tuple))

# min() и max()
# Функция max() возвращает самый большой элемент последовательности,
# а min() — самый маленький. Возьмем следующий пример:

print(max(b_tuple))
print(min(b_tuple))

# Строка «Apple» автоматически преобразуется в последовательность символов.
a = ('Apple')
print(max(a))

# sum()
# С помощью этой функции можно вернуть сумму элементов в кортеже. Работает только с числовыми значениями.

sum(b_tuple)

# sorted()
# Чтобы получить кортеж с отсортированными элементами,
# используйте sorted() как в следующем примере:
a = (6, 7, 4, 2, 1, 5, 3)
sorted(a)
# Но важно отметить, что возвращаемый тип — список, а не кортеж.
# При этом последовательность в оригинальном объекте неизменна,
# а сам он остается кортежем.

# Присваивание несколько кортежей
# Кортежи можно использовать для присваивания нескольких значений одновременно.

c = (32, 2, 3)
(one, two, three) = c
print(one)
